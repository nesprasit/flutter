def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_architecture_mvvm_0"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"
    }

    flavorDimensions "env"

    productFlavors {
        prod {
            dimension "env"
            applicationIdSuffix ""
            versionCode 1
            versionName "1.0.0"
            resValue "string", "app_name", "Flutter PRO"
            buildConfigField "String", "BASE_URL", '""'
        }

        uat {
            dimension "env"
            applicationIdSuffix ".uat"
            versionCode 1
            versionName "1.0.0"
            resValue "string", "app_name", "Flutter UAT"
            buildConfigField "String", "BASE_URL", '""'
        }

        dev {
            dimension "env"
            applicationIdSuffix ".dev"
            versionCode 1
            versionName "1.0.0"
            resValue "string", "app_name", "Flutter DEV"
            buildConfigField "String", "BASE_URL", '"https://us-central1-playground-24194.cloudfunctions.net/api/"'
        }
    }

    buildTypes {
        debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug  
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}